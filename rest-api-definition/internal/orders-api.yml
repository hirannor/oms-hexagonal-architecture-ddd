openapi: 3.0.3
info:
  title: Orders API
  version: 1.0.0
  description: API for managing Orders
security:
  - bearerAuth: []

paths:
  /orders:
    post:
      summary: Create a new order
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

    get:
      summary: List all orders
      operationId: displayAll
      responses:
        '200':
          description: A list of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /orders/{orderId}:
    get:
      summary: Get an order by ID
      operationId: displayBy
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /orders/{orderId}/pay:
    post:
      summary: Mark order as paid
      operationId: pay
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Payment initiated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayOrderResponse'
        '400':
          description: Invalid order status or customer mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /orders/{orderId}/cancel:
    post:
      summary: Mark order as canceled
      operationId: cancel
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Order marked as canceled
        '400':
          description: Invalid order status or customer mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

  /orders/{orderId}/status:
    patch:
      summary: Change the status of an order
      operationId: change
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeOrderStatus'
      responses:
        '204':
          description: Order status updated
        '400':
          description: Invalid status transition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic

  schemas:
    Currency:
      type: string
      enum: [HUF, EUR]

    Money:
      type: object
      properties:
        amount:
          type: string
          format: decimal
          example: "99.99"
        currency:
          $ref: '#/components/schemas/Currency'
      required: [amount, currency]

    OrderedProduct:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          $ref: '#/components/schemas/Money'
      required: [productId, quantity, price]

    CreateOrder:
      type: object
      properties:
        customerId:
          type: string
        products:
          type: array
          items:
            $ref: '#/components/schemas/OrderedProduct'
      required: [customerId, products]

    PayOrderResponse:
      type: object
      properties:
        paymentUrl:
          type: string
          description: Redirect URL to the Checkout page or payment gateway page
        orderId:
          type: string
        amount:
          $ref: '#/components/schemas/Money'
      required: [paymentUrl, orderId, amount]

    ChangeOrderStatus:
      type: object
      properties:
        newStatus:
          $ref: '#/components/schemas/OrderStatus'
        orderId:
          type: string
      required: [newStatus, orderId]

    Order:
      type: object
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/OrderStatus'
        orderedProducts:
          type: array
          items:
            $ref: '#/components/schemas/OrderedProduct'
        customerId:
          type: string
        createdAt:
          type: string
          format: date-time
        totalPrice:
          $ref: '#/components/schemas/Money'
      required: [id, status, orderedProducts, customerId, createdAt, totalPrice]

    OrderStatus:
      type: string
      enum:
        - CREATED
        - WAITING_FOR_PAYMENT
        - PAID_SUCCESSFULLY
        - PAYMENT_FAILED
        - PAYMENT_CANCELED
        - PROCESSING
        - SHIPPED
        - DELIVERED
        - CANCELLED
        - RETURNED
        - REFUNDED

    ProblemDetails:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
        fields:
          type: object
          additionalProperties:
            type: string
          description: A map of fieldName -> validation error message
